  느슨한 결합력과 인터페이스 : 소스코드 없이 코드를 바꿀수 있는 것이라고 볼 수 있다.
  이는 인터페이스를 만들어 사용하면 결합력을 낮출 수 잇다.
 ////////////////////////////////////     ////////////////////////////////////     ////////////////////////////////////     ////////////////////////////////////     ////////////////////////////////////      
  DI(Dependency Injection) : 간단히 부품 조립이라고 생각하면 쉽다.
  
  class A {
    private B b;
    
    public A(){
      b = new B();
      }
     } 
     // 부품형 클래스(구조형)
////////////////////////////////////     
    class A {
      private B b;
    
      public A(){
    //  b = new B();
      public void setB(B b){
        this.b = b;
        }
    }
    }
    // 조립형 클래스 : 결합력이 낮다.
 ////////////////////////////////////
 
 즉 부품이 Denpendency 이며,
 이를 주입하는게 조립형 클래스다.
 
 Setter injection
 B b = new B();
 A a = new A();
 a. setB(b);
 
 Construction Injection
 B b = new B();
 A a = new A(b);

 두 가지 방법이 있다.
 스프링이 이런걸 자연스럽게 조합하게 해준다(쉽게)
  ////////////////////////////////////     ////////////////////////////////////     ////////////////////////////////////     ////////////////////////////////////     ////////////////////////////////////      

  loc (inversion of control) Container : 역순으로 프로그램을 만드는 컨테이너 이다.
  부품들이 결합되어 하나의 완성체가 된다.
  
  maven : 빌드툴 프로젝트 빌드 과정을 효율적으로 할 수 있게 도와준다.
  빌드의 과정을 경량화
  
